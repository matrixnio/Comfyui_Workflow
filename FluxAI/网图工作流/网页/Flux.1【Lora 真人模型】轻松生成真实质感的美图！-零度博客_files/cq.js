!function(){"use strict";const e=document.currentScript,t=e.dataset.bidobjid??"";e.dataset.template;const n="https://td-pixel.c.appier.net/creative-quality",a=((e=21)=>crypto.getRandomValues(new Uint8Array(e)).reduce(((e,t)=>e+((t&=63)<36?t.toString(36):t<62?(t-26).toString(36).toUpperCase():t>62?"-":"_")),""))();function i(e){return null==e}let r=function(e){return e.Loading="loading",e.DOMParsed="DOMParsed",e.Loaded="loaded",e.MRAIDViewable="MRAIDViewable",e.IOViewable="IOViewable",e.FCP="FCP",e}({});async function o(e){const r=JSON.stringify({bidobjid:t,show_id:a,metrics:e.map((e=>{let{type:t,value:n,details:a}=e;return{type:t,value:i(n)?"":JSON.stringify(n),...i(n)?void 0:{details:JSON.stringify(a)}}}))});try{await fetch(n,{method:"POST",keepalive:!0,mode:"no-cors",headers:{"Content-Type":"application/json"},body:r})}catch{}}function d(){const[e]=performance.getEntriesByType("navigation");return e}const s=Math.random();t&&"${bidobjid}"!==t&&s<=.01&&(o([{type:r.Loading}]),window.mraid&&async function(){await async function(){if(await async function(){switch(window.mraid?.getState()){case"loading":return await new Promise((e=>{const t=()=>{window.mraid?.removeEventListener("ready",t),e()};window.mraid?.addEventListener("ready",t)}));case"default":case"expanded":case"resized":case"hidden":return;default:throw new Error("Unknown MRAID state")}}(),!0!==window.mraid?.isViewable())return await new Promise((e=>{const t=n=>{n&&(window.mraid?.removeEventListener("viewableChange",t),e())};window.mraid?.addEventListener("viewableChange",t)}))}(),o([{type:r.MRAIDViewable,value:performance.now()}])}(),new IntersectionObserver(((e,t)=>{const n=e[0];n.isIntersecting&&(t.disconnect(),o([{type:r.IOViewable,value:n.time}]))})).observe(document.documentElement),async function(){await new Promise((e=>{switch(document.readyState){case"loading":document.addEventListener("DOMContentLoaded",(()=>e()));break;case"interactive":case"complete":e()}}));const e=d();e&&o([{type:r.DOMParsed,value:e.domInteractive}])}(),async function(){await new Promise((e=>{switch(document.readyState){case"loading":case"interactive":window.addEventListener("load",(()=>e()));break;case"complete":e()}}));const e=d();e&&o([{type:r.Loaded,value:e.domComplete}])}(),new PerformanceObserver((e=>{e.getEntriesByName("first-contentful-paint").forEach((e=>{o([{type:r.FCP,value:e.startTime}])}))})).observe({type:"paint",buffered:!0}))}();